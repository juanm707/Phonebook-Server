{"version":3,"sources":["services/person.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","console","log","id","put","delete","Filter","filter","onChange","value","PersonForm","props","onSubmit","newName","onNameChange","newNumber","onNumberChange","type","Persons","personsToDisplay","map","person","key","name","number","onClick","onDelete","Notication","message","styleT","style","marginTop","className","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","setPersonsToDisplay","notification","setNotifcation","isError","setIsError","useEffect","personService","initialPersons","paddingLeft","event","target","toUpperCase","includes","preventDefault","newPerson","length","window","confirm","updatedPerson","returnedPerson","newPersons","p","setTimeout","catch","error","p1","concat","alert","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1bbd1ab.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/persons' //'http://localhost:3001/api/persons';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    // return request.then(response => response.data);\n    return request.then(response => response.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => {\n        console.log(response.data);\n        return response.data;\n    });\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n}\n\nconst erase = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`);\n    return request.then(response => {\n        return response.data;\n    })\n}\n\nexport default { getAll, create, update, erase }","import React, {useState, useEffect } from 'react';\nimport './App.css';\nimport personService from './services/person';\n\nconst Filter = ({filter, onChange}) => {\n\n  return (\n      <div>\n        <p>filter shown with</p><input value={filter} onChange={onChange}/>\n      </div>\n  );\n}\n\nconst PersonForm = (props) => {\n\n  return (\n      <div>\n        <form onSubmit={props.onSubmit}>\n          <div>\n            name: <input value={props.newName} onChange={props.onNameChange}/>\n            <br/>\n            number: <input value={props.newNumber} onChange={props.onNumberChange}/>\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n        </form>\n      </div>\n  );\n}\n\nconst Persons = (props) => {\n    console.log(props.personsToDisplay);\n  return (\n      <div>\n        {props.personsToDisplay.map(person => {\n            console.log('In Persons', person);\n            return (\n                <div key={person.id}>\n                    <p key={person.name}>{person.name} {person.number} <button onClick={() => props.onDelete(person)}>delete</button></p>\n                </div>\n            );\n        })}\n      </div>\n  );\n}\n\nconst Notication = ({ message, styleT }) => {\n    if (message === null) {\n        return null;\n    }\n    return (\n        <div style={{marginTop: '10px'}} className={styleT ? 'error' : 'success'}>\n            {message}\n        </div>\n    );\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [personsToDisplay, setPersonsToDisplay] = useState([...persons]);\n  const [notification, setNotifcation] = useState(null);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n      personService\n          .getAll()\n          .then(initialPersons => {\n              setPersons(initialPersons);\n              setPersonsToDisplay(initialPersons);\n          });\n  }, []);\n\n  // getAll\n  // const hook = () => {\n  //   axios\n  //       .get('http://localhost:3001/persons')\n  //       .then(response => {\n  //         setPersons(response.data);\n  //         setPersonsToDisplay(response.data);\n  //       });\n  // };\n\n  // useEffect(hook, []);\n\n  const addPerson = (event) => {\n      event.preventDefault();\n\n      const newPerson = persons.filter(person => person.name === newName);\n      if (newPerson.length > 0) {\n          if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n              const updatedPerson = {...newPerson[0], number: newNumber};\n              personService\n                  .update(updatedPerson.id, updatedPerson)\n                  .then(returnedPerson => {\n                      const newPersons = persons.map(p => p.id !== returnedPerson.id ? p : returnedPerson);\n\n                      setPersons(newPersons);\n                      setPersonsToDisplay([...newPersons]);\n                      setNewName('');\n                      setNewNumber('');\n                      setFilter('');\n\n                      setNotifcation(\n                          `${returnedPerson.name} was successfully updated`\n                      );\n                      setIsError(false);\n                      setTimeout(() => {\n                          setNotifcation(null)\n                      }, 5000);\n                  })\n                  .catch(error => {\n                      setNotifcation(`Information for ${newName} has already been removed from the server`);\n                      setIsError(true);\n                      setTimeout(() => {\n                          setNotifcation(null)\n                      }, 5000);\n\n                      let newPersons = persons.filter(p1 => {\n                          return p1.id !== updatedPerson.id;\n                      });\n\n                      setPersons(newPersons);\n                      setPersonsToDisplay([...newPersons]);\n                  })\n          }\n      } else {\n\n          const personObject = {\n              name: newName,\n              number: newNumber\n          };\n\n          personService\n              .create(personObject)\n              .then(returnedPerson => {\n                  setPersons(persons.concat(returnedPerson));\n                  setPersonsToDisplay(persons.concat(returnedPerson));\n                  setNewName('');\n                  setNewNumber('');\n                  setFilter('');\n\n                  setNotifcation(\n                      `${returnedPerson.name} was successfully added`\n                  );\n                  setIsError(false);\n                  setTimeout(() => {\n                      setNotifcation(null)\n                  }, 5000);\n              });\n      }\n  }\n\n  const deletePerson = (person) => {\n      //console.log('In deletePerson', person);\n      if (window.confirm(`Delete ${person.name}?`)) {\n          personService\n              .erase(person.id)\n              .then(() => {\n                  let newPersons = persons.filter(p1 => {\n                      return p1.id !== person.id;\n                  });\n                  console.log('newPersons', newPersons);\n                  setPersons(newPersons);\n                  setPersonsToDisplay([...newPersons]);\n\n                  setNotifcation(\n                      `${person.name} was successfully deleted`\n                  );\n                  setIsError(false);\n                  setTimeout(() => {\n                      setNotifcation(null)\n                  }, 5000);\n              })\n              .catch(error => alert(error));\n      } else {}\n  }\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const handleFilter = (event) => {\n    setFilter(event.target.value);\n    if (event.target.value === \"\") {\n      setPersonsToDisplay([...persons]);\n    } else {\n      setPersonsToDisplay(persons.filter(person => person.name.toUpperCase().includes(event.target.value.toUpperCase())));\n    }\n  }\n\n  return (\n      <div style={{paddingLeft:'10px'}}>\n        <Notication message={notification} styleT={isError} />\n        <h2>Phonebook</h2>\n        <Filter filter={filter} onChange={handleFilter}/>\n        <h3>Add a new</h3>\n        <PersonForm onSubmit={addPerson} newName={newName} newNumber={newNumber} onNameChange={handleNewName} onNumberChange={handleNewNumber}/>\n        <h3>Numbers</h3>\n        <Persons personsToDisplay={personsToDisplay} onDelete={deletePerson}/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}